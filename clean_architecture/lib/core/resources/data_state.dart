//1) Этот абстрактный базовый класс очень удобен, когда мы подходим к тому факту, что мы собираемся взаимодействовать с сетевыми вызовами, но как определить состояние запроса, отправляемого на сервер, и его реакцию, этот класс-оболочку можно использовать для обертывания нашего весь сетевой вызов, который так важен позже, когда у нас будет слишком много запросов и логики, вы увидите, насколько минимизируется код, поскольку вы можете видеть в коде, что у нас есть два разных состояния: одно, когда мы получаем успешный ответ, а другое - используется, когда возникает ошибка при отправке запроса или повторном получении ответа.
import 'package:dio/dio.dart';

abstract class DataState<T> {
  final T? data;
  final DioError? error;
  DataState({this.data, this.error});
}

class DataSuccess<T> extends DataState<T> {
  DataSuccess(T data) : super(data: data);
}

class DataFailed<T> extends DataState<T> {
  DataFailed(DioError error) : super(error: error);
}
